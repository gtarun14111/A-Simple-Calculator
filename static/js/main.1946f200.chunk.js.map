{"version":3,"sources":["Components/Appbar/Appbar.js","Components/Numpad/Numpad.js","Components/Oppad/Oppad.js","Components/InputShow/InputShow.js","Components/Calculator/Calculator.js","Containers/app/actions.js","Containers/app/constants.js","Containers/App.js","Containers/app/reducers.js","Containers/app/store.js","serviceWorker.js","index.js"],"names":["Appbar","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu","Typography","variant","Numpad","getNumber","className","map","number","key","Button","value","onClick","Oppad","getOperation","operation","InputShow","number1","number2","result","showOperation","showNumber1","showNumber2","showResult","valueFromButton","event","undefined","target","innerHTML","Calculator","this","props","Component","connect","state","numberSetter","operationCount","dispatch","type","payload","App","logger","createLogger","middleware","getDefaultMiddleware","configureStore","reducer","action","doOperation","Object","assign","Number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1946f200.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/core/Menu';\r\n\r\n\r\nconst Appbar = () => {\r\n\treturn (\r\n\t\t<AppBar position=\"static\">\r\n\t\t  <Toolbar>\r\n\t\t    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\t\t      <MenuIcon />\r\n\t\t    </IconButton>\r\n\t\t    <Typography variant=\"h6\">\r\n\t\t      Calculator\r\n\t\t    </Typography>\r\n\t\t  </Toolbar>\r\n\t\t</AppBar>\r\n\t\t);\r\n}\r\n\r\nexport default Appbar;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Numpad = ({ getNumber}) => {\r\n\tconst numArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\r\n\treturn (\r\n\t\t<div className=\"numpad\">\r\n\t\t{\r\n\t\t\tnumArr.map(number => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div key={number}>\r\n\t\t\t\t\t<Button \r\n\t\t\t\t\tclassName=\"button\" \r\n\t\t\t\t\tvariant=\"contained\" \r\n\t\t\t\t\tcolor=\"primary\" \r\n\t\t\t\t\tvalue = {number}\r\n\t\t\t\t\tonClick={getNumber}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{number}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t})\t\t\t\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Numpad;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Oppad = ({ getOperation }) => {\r\n\tconst operationArr = ['+', '-', '*', '/', 'Clear', '='];\r\n\treturn (\r\n\t\t<div className=\"oppad\">\r\n\t\t{\r\n\t\t\toperationArr.map(operation => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div key={operation}>\r\n\t\t\t\t\t<Button \r\n\t\t\t\t\tclassName=\"button\" \r\n\t\t\t\t\tvariant=\"outlined\" \r\n\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\tvalue= {operation}\r\n\t\t\t\t\tonClick= {getOperation}>\r\n\t\t\t\t\t\t{operation}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t})\t\t\t\r\n\t\t}\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Oppad;","import React from 'react';\r\nimport './InputShow.css';\r\n\r\nconst InputShow = ({ number1, number2, operation, result }) => {\r\n\tlet showOperation = operation;\r\n\tlet showNumber1 = number1 === 0 ? \"\" : number1;\r\n\tlet showNumber2 = number2 === 0 ? \"\" : number2;\r\n\tlet showResult = result === 0 ? \"\" : result;\r\n\tif(operation === \"Clear\" || operation === \"=\") {\r\n\t\tshowOperation = \"\";\r\n\t}\r\n\r\n\tif(showNumber1 === showResult) {\r\n\t\tif(showNumber2 === \"\") {\r\n\t\t\tshowOperation = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\tif(showResult) {\r\n\t\tif(showNumber1) {\r\n\t\t\tshowResult = \"\";\r\n\t\t}\r\n\t\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<label className=\"theLabel\"> {showNumber1} {showOperation} {showNumber2} {showResult}</label>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default InputShow;\r\n","import React, { Component } from 'react';\r\nimport './Calculator.css';\r\nimport Appbar from '../Appbar/Appbar';\r\nimport Numpad from '../Numpad/Numpad';\r\nimport Oppad from '../Oppad/Oppad';\r\nimport InputShow from '../InputShow/InputShow';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { getNumber, getOperation } from '../../Containers/app/actions';\r\n\r\n\tconst valueFromButton = (event) => {\r\n\t\t\tif(event.target.value === undefined) {\r\n\t\t\t\treturn event.target.innerHTML;\r\n\t\t\t}\r\n\t\t\treturn event.target.value;\r\n\t};\r\n\r\n\tconst mapStateToProps = state => {\r\n\t\treturn {\r\n\t\t\tnumber1: state.numberSetter.number1,\r\n\t\t\tnumber2: state.numberSetter.number2,\r\n\t\t\toperationCount: state.numberSetter.operationCount,\r\n\t\t\toperation: state.numberSetter.operation,\r\n\t\t\tresult: state.numberSetter.result\r\n\t}\r\n\t};\r\n\r\n\r\n\tconst mapDispatchToProps = (dispatch) => {\r\n\t\treturn {\r\n\t\tgetNumber: (event) => dispatch(getNumber(valueFromButton(event))),\r\n\t\tgetOperation: (event) =>dispatch(getOperation(valueFromButton(event)))\r\n\t}\r\n\t}\r\n\r\nclass Calculator extends Component {\r\n\trender() {\r\n\r\n\tconst { \r\n\t\tnumber1, \r\n\t\tnumber2, \r\n\t\tgetNumber, \r\n\t\tgetOperation, \r\n\t\tresult,\r\n\t\toperation \r\n\t} = this.props;\r\n\r\n\treturn(\r\n\t<div className =\"structure\">\r\n\r\n\t\t<Appbar />\r\n\t\t<InputShow\r\n\t\tnumber1={number1}\r\n\t\tnumber2= {number2}\r\n\t\toperation = {operation}\r\n\t\tresult = {result}\r\n\t\t/>\r\n\t\t\r\n\t\t<Numpad getNumber={getNumber}/>\r\n\t\t<Oppad getOperation={getOperation}/>\r\n\t</div> \r\n\t\t);\r\n}\r\n}\r\n\r\n export default connect(mapStateToProps, mapDispatchToProps)(Calculator);","import { GET_NUMBER, GET_OPERATION } from './constants';\r\n\r\nexport const getNumber = (text) => {\r\n\treturn {\r\n\ttype: GET_NUMBER,\r\n\tpayload: text\r\n}\r\n}\r\n\r\nexport const getOperation = (text) => ({\r\n\ttype: GET_OPERATION,\r\n\tpayload: text\r\n})","export const GET_NUMBER = \"GET_NUMBER\";\r\nexport const GET_OPERATION = \"GET_OPERATION\";","import React from 'react';\r\nimport './App.css';\r\nimport Calculator from '../Components/Calculator/Calculator'\r\n\r\n\r\nconst App = () => {\t\r\n\t   \treturn (\r\n\t   \t\t<div>\t  \t\t\t\r\n\t  \t\t\t<Calculator />\r\n\t  \t\t</div>\r\n\t  \t);\r\n}\r\n\r\nexport default App;\r\n","import { GET_NUMBER, GET_OPERATION } from './constants';\r\n\r\nconst number = {\r\n\tnumber1: 0,\r\n\tnumber2: 0,\r\n\toperationCount: 0,\r\n\toperation: \"\",\r\n\tresult: 0\r\n}\r\n\r\nexport const numberSetter= (state = number, action = {}) => {\r\n\tconst { number1, number2, operation } = state;\r\n\tconst doOperation = (number1, number2, operation) => {\r\n\t\t\r\n\t\tswitch(operation) {\r\n\t\t\tcase '+': return  number1 + number2 ;\r\n\t\t\tcase '-': return  number1 - number2 ;\r\n\t\t\tcase '*': return  number1 * number2 ;\r\n\t\t\tcase '/': return  number1 / number2 ;\r\n\t\t\tdefault: return \"\" ;\r\n\t\t}\r\n\t}\r\n\r\n\tif(action.type === GET_NUMBER) {\r\n\t\tif(state.operationCount === 0) {\r\n\t\t\treturn Object.assign({}, state, {number1: (number1*10)+Number(action.payload)})\r\n\t\t}\r\n\t\telse if(state.operationCount > 0) {\r\n\t\t\treturn Object.assign({}, state, {number2: (number2*10)+Number(action.payload)})\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tif(action.type === GET_OPERATION) {\r\n\t\tif(action.payload === \"Clear\") {\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tresult: \"\",\r\n\t\t\t\tnumber1: 0,\r\n\t\t\t\tnumber2: 0,\r\n\t\t\t\toperation: action.payload,\r\n\t\t\t\toperationCount: 0\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if(action.payload === \"=\") {\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tresult: doOperation(number1, number2, operation),\r\n\t\t\t\tnumber1: 0,\r\n\t\t\t\tnumber2: 0,\r\n\t\t\t\toperation: action.payload,\r\n\t\t\t\toperationCount: 0\r\n\t\t\t})\r\n\t\t}\r\n\t\tif(state.operationCount >= 1) {\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tresult: doOperation(number1, number2, operation),\r\n\t\t\t\tnumber1: doOperation(number1, number2, operation),\r\n\t\t\t\tnumber2: 0,\r\n\t\t\t\toperation: action.payload,\r\n\t\t\t\toperationCount: state.operationCount + 1\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn Object.assign({}, state, {operationCount: state.operationCount + 1, operation: action.payload})\r\n\t\t\r\n\t}\r\n\r\n\r\n\r\n\telse {\r\n\t\treturn state\r\n\t}\r\n}","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { numberSetter } from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nconst logger = createLogger();\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n  \tnumberSetter\r\n  },\r\n  middleware\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport store from './Containers/app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}